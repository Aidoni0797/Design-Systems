Работа с сетью в Python в одном обзаце

Программистам на Python доступен целый ряд сторонних инструментов для создания серверов и клиентов, работающих
по сети, но все они основаны на одном модуле - socket. Этот модуль предоставляет доступ ко всем необходимым
компонентам для быстрого написания клиентов и серверов, взаимодействующих по ТСР (Transmission Control
Protocol - протокол управления передачей) и UDP (User Datagram Protocol - протокол пользовательских датаграмм),
применения сырых сокетов и т.п. На самом деле этого модуля вполне достаточно, для того чтобы получить или
поддерживать несанкционированный доступ к атакуемым компьютерам. Для начала создадим простые клиентские
и серверные программы - два вида сетевых скриптов, которые вам придется писать чаще всего.

TCP-клиент
 Не сосчитать сколько раз во время тестирования на проникновение нам (авторам) нужно было на скорую руку
написать ТСР-клиент для проверки сервисов, отправки бессмысленных данных, проведения фаззинга или 
выполнения каких-либо других задач.  Если вы работаете внутри крупного корпоративного окружения, у вас
не будет такой роскоши, как сетевые инструменты или компиляторы, а иногда вы будете лишены даже самого
элементарного, например возможности копирования / вставки информации или подключения к интернету. Именно
в таких условиях способность быстро создать ТСР-клиент чрезвычайно полезна. Но хватит болтать - давайте
писать код! Вот простой ТСР-клиент:

import socket

target_host = "www.google.com"
target_port = 80

#создадим объект сокета
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# подключаем клиент
client.connect((target_host, target_port))

# отправляем какие-нибудь данные
client.send(b"GET / HTTP/1.1\r\nHost: google.com\r\n\r\n")

#принимаем какие-нибудь данные
response = client.recv(4096)

print(reesponse.decode())
client.close()

Сначала создаем объект сокета с параметрами AF_INET и SOCK_STREAM. Параметр AF_INET говорит о том, что мы
будем использовать стандартный адрес IPv4 или сетевое имя, а SOCK_STREAM означает, что клиент будет
работать по ТСР. Затем подключаемся к серверу и отправляем ему какие-то данные в виде байтов. Последний шаг
состоит в получении и выводе ответа, после чего сокет можно закрыть. Это простейший вариант ТСР-клиента, но 
вы будете писать его чаще всего.

В этом фрагменте кода делаются серьезные допущения насчет сокетов, и вам определенно нужно о них знать.
Первое допущение - соединение всегда остается стабильным, второе - сервер ждет, когда мы первыми отправим
данные (некоторые серверы сначала шлют данные, а затем ожидают от вас ответа). Третье предположение 
заключается в том, что сервер всегда и вовремя возвращает данные. Все это в основном продиктовано желанием
упростить код. В программистской среде существуют разные мнения о том, как работать с блокирующими сокетами,
обрабатывать их исключения и т.п., однако пентестеры довольно редко реализуют такие тонкости в своих
инструментах, написанных на скорую руку для сбора данных или экслпуатации удаленных компьютеров,
поэтому в данной главе мы их тоже проигнорируем.